<domain_driven_design>
    <principles>
        <rule>Model software based on the business domain using ubiquitous language shared by developers and domain experts</rule>
        <rule>Implement bounded contexts to establish clear boundaries between different domain models</rule>
        <rule>Distinguish between entities (defined by identity) and value objects (defined by attributes)</rule>
        <rule>Use aggregates to enforce invariants and transactional boundaries</rule>
        <rule>Implement domain events to capture and communicate business-significant occurrences</rule>
        <rule>Create anti-corruption layers when integrating with legacy systems or external services</rule>
        <rule>Apply strategic design patterns for context mapping between bounded contexts</rule>
    </principles>
    
    <tactical_patterns>
        <rule>Implement repositories for persistence abstraction of aggregate roots only</rule>
        <rule>Use factories for complex object creation logic</rule>
        <rule>Create domain services for operations that don't naturally belong to entities or value objects</rule>
        <rule>Make value objects immutable to ensure integrity</rule>
        <rule>Implement specification pattern for encapsulating business rules</rule>
    </tactical_patterns>
</domain_driven_design>


<enterprise_architecture_styles>
    <architectural_patterns>
        <rule>Apply hexagonal/ports and adapters architecture to isolate business logic from external concerns</rule>
        <rule>Consider CQRS (Command Query Responsibility Segregation) for complex domains with different read/write requirements</rule>
        <rule>Implement event sourcing where audit trail or temporal querying is essential</rule>
        <rule>Utilize the onion architecture to maintain dependencies pointing inward toward the domain</rule>
        <rule>Apply the vertical slice architecture for feature-based organization</rule>
        <rule>Use event-driven architecture for loosely coupled, highly scalable systems</rule>
    </architectural_patterns>
    
    <microservices_patterns>
        <rule>Design services around business capabilities and bounded contexts</rule>
        <rule>Implement API gateways for client-facing service facades</rule>
        <rule>Use service discovery mechanisms for dynamic service location</rule>
        <rule>Apply circuit breaker pattern to prevent cascading failures</rule>
        <rule>Implement saga pattern for maintaining data consistency across services</rule>
        <rule>Use bulkhead pattern to isolate failures in distributed systems</rule>
        <rule>Apply the outbox pattern for reliable message publishing with transactions</rule>
    </microservices_patterns>
</enterprise_architecture_styles>
